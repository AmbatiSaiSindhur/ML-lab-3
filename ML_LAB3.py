{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2b69ff15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Label</th>\n",
       "      <th>f0</th>\n",
       "      <th>f1</th>\n",
       "      <th>f2</th>\n",
       "      <th>f3</th>\n",
       "      <th>f4</th>\n",
       "      <th>f5</th>\n",
       "      <th>f6</th>\n",
       "      <th>f7</th>\n",
       "      <th>f8</th>\n",
       "      <th>...</th>\n",
       "      <th>f190</th>\n",
       "      <th>f191</th>\n",
       "      <th>f192</th>\n",
       "      <th>f193</th>\n",
       "      <th>f194</th>\n",
       "      <th>f195</th>\n",
       "      <th>f196</th>\n",
       "      <th>f197</th>\n",
       "      <th>f198</th>\n",
       "      <th>f199</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>50.557468</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>414.879486</td>\n",
       "      <td>...</td>\n",
       "      <td>316.271667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>239.577011</td>\n",
       "      <td>277.834534</td>\n",
       "      <td>205.776398</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>91.438698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>125.256027</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48.989120</td>\n",
       "      <td>0</td>\n",
       "      <td>1736.242432</td>\n",
       "      <td>...</td>\n",
       "      <td>1317.333740</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1000.075012</td>\n",
       "      <td>1118.496948</td>\n",
       "      <td>1030.366699</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>297.483124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>50.160606</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>435.235992</td>\n",
       "      <td>...</td>\n",
       "      <td>330.470978</td>\n",
       "      <td>0.0</td>\n",
       "      <td>251.886398</td>\n",
       "      <td>288.062134</td>\n",
       "      <td>220.889481</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>93.795654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>63.720730</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>588.439148</td>\n",
       "      <td>...</td>\n",
       "      <td>442.839233</td>\n",
       "      <td>0.0</td>\n",
       "      <td>345.145599</td>\n",
       "      <td>389.100678</td>\n",
       "      <td>304.433990</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>117.381721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>64.484604</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>37.368713</td>\n",
       "      <td>0</td>\n",
       "      <td>1080.826782</td>\n",
       "      <td>...</td>\n",
       "      <td>835.147400</td>\n",
       "      <td>0.0</td>\n",
       "      <td>649.643616</td>\n",
       "      <td>693.101868</td>\n",
       "      <td>690.640564</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>159.916016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3248</th>\n",
       "      <td>2</td>\n",
       "      <td>283.005707</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>73.068192</td>\n",
       "      <td>0</td>\n",
       "      <td>3528.416992</td>\n",
       "      <td>...</td>\n",
       "      <td>2643.636230</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2036.106934</td>\n",
       "      <td>2269.582275</td>\n",
       "      <td>1973.414917</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>657.907715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3249</th>\n",
       "      <td>2</td>\n",
       "      <td>609.193603</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>131.018112</td>\n",
       "      <td>0</td>\n",
       "      <td>8026.524414</td>\n",
       "      <td>...</td>\n",
       "      <td>5950.206055</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4727.840820</td>\n",
       "      <td>5170.731934</td>\n",
       "      <td>4594.757324</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1362.733398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3250</th>\n",
       "      <td>2</td>\n",
       "      <td>781.789490</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>174.997360</td>\n",
       "      <td>0</td>\n",
       "      <td>10129.193360</td>\n",
       "      <td>...</td>\n",
       "      <td>7535.423828</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5972.883789</td>\n",
       "      <td>6563.629883</td>\n",
       "      <td>5749.376465</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1758.735840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3251</th>\n",
       "      <td>2</td>\n",
       "      <td>688.966675</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>206.603851</td>\n",
       "      <td>0</td>\n",
       "      <td>9555.453125</td>\n",
       "      <td>...</td>\n",
       "      <td>7119.000977</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5575.274414</td>\n",
       "      <td>6160.208984</td>\n",
       "      <td>5423.260742</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1670.340088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3252</th>\n",
       "      <td>2</td>\n",
       "      <td>180.310455</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>81.433441</td>\n",
       "      <td>0</td>\n",
       "      <td>2559.565430</td>\n",
       "      <td>...</td>\n",
       "      <td>1922.478027</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1477.720093</td>\n",
       "      <td>1617.056763</td>\n",
       "      <td>1526.339966</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>408.525330</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3253 rows × 201 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Label          f0   f1   f2   f3   f4   f5          f6  f7  \\\n",
       "0         2   50.557468  0.0  0.0  0.0  0.0  0.0    0.000000   0   \n",
       "1         2  125.256027  0.0  0.0  0.0  0.0  0.0   48.989120   0   \n",
       "2         2   50.160606  0.0  0.0  0.0  0.0  0.0    0.000000   0   \n",
       "3         2   63.720730  0.0  0.0  0.0  0.0  0.0    0.000000   0   \n",
       "4         2   64.484604  0.0  0.0  0.0  0.0  0.0   37.368713   0   \n",
       "...     ...         ...  ...  ...  ...  ...  ...         ...  ..   \n",
       "3248      2  283.005707  0.0  0.0  0.0  0.0  0.0   73.068192   0   \n",
       "3249      2  609.193603  0.0  0.0  0.0  0.0  0.0  131.018112   0   \n",
       "3250      2  781.789490  0.0  0.0  0.0  0.0  0.0  174.997360   0   \n",
       "3251      2  688.966675  0.0  0.0  0.0  0.0  0.0  206.603851   0   \n",
       "3252      2  180.310455  0.0  0.0  0.0  0.0  0.0   81.433441   0   \n",
       "\n",
       "                f8  ...         f190  f191         f192         f193  \\\n",
       "0       414.879486  ...   316.271667   0.0   239.577011   277.834534   \n",
       "1      1736.242432  ...  1317.333740   0.0  1000.075012  1118.496948   \n",
       "2       435.235992  ...   330.470978   0.0   251.886398   288.062134   \n",
       "3       588.439148  ...   442.839233   0.0   345.145599   389.100678   \n",
       "4      1080.826782  ...   835.147400   0.0   649.643616   693.101868   \n",
       "...            ...  ...          ...   ...          ...          ...   \n",
       "3248   3528.416992  ...  2643.636230   0.0  2036.106934  2269.582275   \n",
       "3249   8026.524414  ...  5950.206055   0.0  4727.840820  5170.731934   \n",
       "3250  10129.193360  ...  7535.423828   0.0  5972.883789  6563.629883   \n",
       "3251   9555.453125  ...  7119.000977   0.0  5575.274414  6160.208984   \n",
       "3252   2559.565430  ...  1922.478027   0.0  1477.720093  1617.056763   \n",
       "\n",
       "             f194  f195  f196  f197  f198         f199  \n",
       "0      205.776398   0.0   0.0   0.0   0.0    91.438698  \n",
       "1     1030.366699   0.0   0.0   0.0   0.0   297.483124  \n",
       "2      220.889481   0.0   0.0   0.0   0.0    93.795654  \n",
       "3      304.433990   0.0   0.0   0.0   0.0   117.381721  \n",
       "4      690.640564   0.0   0.0   0.0   0.0   159.916016  \n",
       "...           ...   ...   ...   ...   ...          ...  \n",
       "3248  1973.414917   0.0   0.0   0.0   0.0   657.907715  \n",
       "3249  4594.757324   0.0   0.0   0.0   0.0  1362.733398  \n",
       "3250  5749.376465   0.0   0.0   0.0   0.0  1758.735840  \n",
       "3251  5423.260742   0.0   0.0   0.0   0.0  1670.340088  \n",
       "3252  1526.339966   0.0   0.0   0.0   0.0   408.525330  \n",
       "\n",
       "[3253 rows x 201 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "df=pd.read_csv(r\"C:\\class\\projects\\sem 5\\Machine Learning\\Custom_CNN_Features.csv\")\n",
    "data=df.drop(['Filename'], axis=1)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "99659e66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spread A:       Label         f0          f1          f2          f3          f4  \\\n",
      "315       0  54.072708  190.424149  171.412384  200.844040   59.449810   \n",
      "316       0  17.999994  427.368317  497.897644  593.005005  179.952545   \n",
      "317       0  19.093283  302.189911  350.839813  416.387360  126.623985   \n",
      "318       0   0.000000  304.075775  376.169708  455.118042  139.511551   \n",
      "319       0  13.408073  308.610718  347.494385  427.345215  125.259972   \n",
      "...     ...        ...         ...         ...         ...         ...   \n",
      "2837      0   0.000000   91.127724  133.311844  178.245224   16.989559   \n",
      "2839      0   0.000000  105.179398  158.497864  211.168915   19.109421   \n",
      "2842      0   0.000000   88.941750  131.907898  177.548203   16.531143   \n",
      "2845      0   0.000000  103.924370  166.680130  222.978546   16.164415   \n",
      "2846      0   0.000000  109.293503  165.631149  222.781113   22.865599   \n",
      "\n",
      "              f5   f6  f7         f8  ...      f190  f191       f192  \\\n",
      "315   209.542541  0.0   0  56.061501  ...  5.479018   0.0  24.472166   \n",
      "316   494.877808  0.0   0   0.000000  ...  0.000000   0.0   0.000000   \n",
      "317   340.453308  0.0   0   0.000000  ...  0.000000   0.0   0.000000   \n",
      "318   355.311066  0.0   0   0.000000  ...  0.000000   0.0   0.000000   \n",
      "319   354.997436  0.0   0   0.000000  ...  0.000000   0.0   0.000000   \n",
      "...          ...  ...  ..        ...  ...       ...   ...        ...   \n",
      "2837  147.231094  0.0   0   0.000000  ...  0.000000   0.0   0.000000   \n",
      "2839  174.176498  0.0   0   0.000000  ...  0.000000   0.0   0.000000   \n",
      "2842  146.673386  0.0   0   0.000000  ...  0.000000   0.0   0.000000   \n",
      "2845  187.326797  0.0   0   0.000000  ...  0.000000   0.0   0.000000   \n",
      "2846  180.915909  0.0   0   0.000000  ...  0.000000   0.0   0.000000   \n",
      "\n",
      "           f193  f194        f195        f196       f197        f198  \\\n",
      "315   44.435997   0.0  219.515549  190.037857   0.000000  102.455452   \n",
      "316    0.000000   0.0  656.238464  520.614624  22.942602  449.807434   \n",
      "317    0.000000   0.0  463.822449  363.869049  22.594662  299.950104   \n",
      "318    0.000000   0.0  541.823975  394.507324   1.906483  352.385040   \n",
      "319    0.000000   0.0  466.380127  366.891266  21.511267  297.369568   \n",
      "...         ...   ...         ...         ...        ...         ...   \n",
      "2837   0.000000   0.0  214.940353  135.634323   0.000000  117.913971   \n",
      "2839   0.000000   0.0  248.414688  156.069321   0.000000  148.773377   \n",
      "2842   0.000000   0.0  211.349808  134.067261   0.000000  117.006523   \n",
      "2845   0.000000   0.0  261.798248  164.098694   0.000000  148.513092   \n",
      "2846   0.000000   0.0  258.647736  163.952194   0.000000  158.779816   \n",
      "\n",
      "            f199  \n",
      "315   216.470047  \n",
      "316   357.750030  \n",
      "317   254.248703  \n",
      "318   226.161423  \n",
      "319   264.025055  \n",
      "...          ...  \n",
      "2837   37.095474  \n",
      "2839   42.669495  \n",
      "2842   37.703899  \n",
      "2845   44.302826  \n",
      "2846   54.332684  \n",
      "\n",
      "[1055 rows x 201 columns]\n",
      "spread B:       Label         f0         f1          f2          f3         f4  \\\n",
      "523       1  21.948694   0.000000    0.000000    0.000000   0.000000   \n",
      "619       1   0.000000  36.738743   42.873085   59.745335   9.424590   \n",
      "624       1   0.000000  88.259048  112.603493  151.750702  33.193199   \n",
      "625       1   0.000000  98.980545  130.648636  178.629334  31.289476   \n",
      "626       1   0.000000  62.062721  118.101417  155.725357  12.656808   \n",
      "...     ...        ...        ...         ...         ...        ...   \n",
      "3145      1   0.000000   0.000000  129.420776  276.073456   0.000000   \n",
      "3146      1   0.000000   0.000000   95.591904  206.997757   0.000000   \n",
      "3147      1   0.000000   0.000000  135.460114  287.487701   0.000000   \n",
      "3148      1   0.000000   0.000000   79.439156  188.577576   0.000000   \n",
      "3149      1   0.000000   0.000000   69.997917  149.766815   0.000000   \n",
      "\n",
      "              f5         f6  f7          f8  ...        f190  f191  \\\n",
      "523     0.000000   0.000000   0  208.983398  ...  174.895142   0.0   \n",
      "619    44.310802   0.000000   0    0.000000  ...    0.000000   0.0   \n",
      "624   113.690819   0.000000   0    0.000000  ...    0.000000   0.0   \n",
      "625   134.028488   0.000000   0    0.000000  ...    0.000000   0.0   \n",
      "626   138.459000   0.000000   0    0.000000  ...    0.000000   0.0   \n",
      "...          ...        ...  ..         ...  ...         ...   ...   \n",
      "3145  220.317947  16.714956   0    0.000000  ...   50.187031   0.0   \n",
      "3146  167.385773  13.507643   0    0.000000  ...   42.415264   0.0   \n",
      "3147  227.625488  16.306118   0    0.000000  ...   53.488594   0.0   \n",
      "3148  149.089035  26.661833   0    0.000000  ...   47.018055   0.0   \n",
      "3149  119.365974   9.888294   0    0.000000  ...   31.310986   0.0   \n",
      "\n",
      "            f192        f193        f194        f195        f196      f197  \\\n",
      "523   142.110153  151.573914  109.582497    0.000000    0.000000  0.000000   \n",
      "619     0.000000    0.000000    0.000000   65.834900   45.028740  0.893803   \n",
      "624     0.000000    0.000000    0.000000  187.815414  121.538567  0.000000   \n",
      "625     0.000000    0.000000    0.000000  218.090759  140.221390  0.000000   \n",
      "626     0.000000    0.000000    0.000000  188.629135  105.046783  0.000000   \n",
      "...          ...         ...         ...         ...         ...       ...   \n",
      "3145  102.350464    0.000000  137.077957   88.347282   91.828857  0.000000   \n",
      "3146   76.472916    0.000000  106.280052   68.271896   67.523514  0.000000   \n",
      "3147  108.191627    0.000000  143.244614   91.351875   95.920967  0.000000   \n",
      "3148   86.026329    0.000000  111.421837   40.942459   56.295151  0.000000   \n",
      "3149   56.912849    0.000000   75.771904   48.153011   49.091537  0.000000   \n",
      "\n",
      "            f198       f199  \n",
      "523     0.000000  54.611580  \n",
      "619    38.779358  25.538145  \n",
      "624   112.842514  54.535267  \n",
      "625   126.865028  56.906208  \n",
      "626    78.480721  21.489201  \n",
      "...          ...        ...  \n",
      "3145    0.000000   0.000000  \n",
      "3146    0.000000   0.000000  \n",
      "3147    0.000000   0.000000  \n",
      "3148    0.000000   0.000000  \n",
      "3149    0.000000   0.000000  \n",
      "\n",
      "[1634 rows x 201 columns]\n",
      "distance between A and B: nan\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = data[data['Label'] == 0]\n",
    "b= data[data['Label'] == 1]\n",
    "print(f'spread A: {a}')\n",
    "print(f'spread B: {b}')\n",
    "intraa = np.var(a[['f2', 'f3']], ddof=1)\n",
    "intrab = np.var(b[['f4', 'f5']], ddof=1)\n",
    "meanb= np.mean(b[['f4', 'f5']], axis=0)\n",
    "meana= np.mean(a[['f2', 'f3']], axis=0)\n",
    "distance = np.linalg.norm(meana - meanb)\n",
    "print(f'distance between A and B: {distance}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f7ddd2d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label 0 Centroid: [213.78760108 280.33126808]\n",
      "Label 1 Centroid: [ 85.87393279 156.91125406]\n",
      "Label 2 Centroid: [2.03302496 6.32234074]\n",
      "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000020291FA6A90>\n"
     ]
    }
   ],
   "source": [
    "grouped = data.groupby('Label')\n",
    "\n",
    "# Calculate the class centroids (mean) for each class\n",
    "centroids = {}\n",
    "for label, group_data in grouped:\n",
    "    class_mean = group_data[['f2', 'f3']].mean(axis=0)\n",
    "    centroids[label] = class_mean\n",
    "# Print the class centroids\n",
    "for label, centroid in centroids.items():\n",
    "    print(f'Label {label} Centroid: {centroid.values}')\n",
    "print(grouped)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "c58c0867",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SD for Label 0: [86.58855726 99.22540691]\n",
      "SD for Label 1: [46.00990242 83.53161141]\n",
      "SD for Label 2: [13.25556061 27.17014755]\n"
     ]
    }
   ],
   "source": [
    "grouped = data.groupby('Label')\n",
    "\n",
    "# Calculate the standard deviation for each class\n",
    "standarddeviations = {}\n",
    "for clabel, group_data in grouped:\n",
    "    class_std = group_data[['f2', 'f3']].std(axis=0)\n",
    "    standarddeviations[clabel] = class_std\n",
    "\n",
    "# Print the standard deviations for each class\n",
    "for clabel, std_deviation in standarddeviations.items():\n",
    "    print(f'SD for Label {clabel}: {std_deviation.values}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "2ba32c03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distance between Label 0 and Label 1: 177.74815440349153\n",
      "Distance between Label 0 and Label 2: 346.29596123353537\n",
      "Distance between Label 1 and Label 2: 172.35521065783024\n"
     ]
    }
   ],
   "source": [
    "grouped = data.groupby('Label')\n",
    "\n",
    "# Calculate the mean vectors (centroids) for each class\n",
    "centroids = {}\n",
    "for clabel, group_data in grouped:\n",
    "    mean = group_data[['f2', 'f3']].mean(axis=0)\n",
    "    centroids[clabel] = mean\n",
    "\n",
    "# Calculate the distance between mean vectors of different classes\n",
    "clabels = list(centroids.keys())\n",
    "num_classes = len(clabels)\n",
    "distances = {}\n",
    "\n",
    "for i in range(num_classes):\n",
    "    for j in range(i + 1, num_classes):\n",
    "        label1 = clabels[i]\n",
    "        class_label2 = clabels[j]\n",
    "        distance = np.linalg.norm(centroids[label1] - centroids[class_label2])\n",
    "        distances[(label1, class_label2)] = distance\n",
    "\n",
    "# Print the distances between mean vectors\n",
    "for (label1, class_label2), distance in distances.items():\n",
    "    print(f'Distance between Label {label1} and Label {class_label2}: {distance}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "ed8abcbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean : 64.21304276839226\n",
      "Variance : 9972.03239400886\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "featuredata = df['f16']\n",
    "\n",
    "# Define the number of bins (buckets) for the histogram\n",
    "num_bins = 5\n",
    "\n",
    "# Calculate the histogram data (hist_counts) and bin edges (bin_edges)\n",
    "hist_counts, bin_edges = np.histogram(featuredata, bins=num_bins)\n",
    "\n",
    "# Calculate the mean and variance of 'Feature1'\n",
    "mean_feature1 = np.mean(featuredata)\n",
    "variance_feature1 = np.var(featuredata, ddof=1)  # Use ddof=1 for sample variance\n",
    "\n",
    "# Plot the histogram\n",
    "plt.hist(featuredata, bins=num_bins, edgecolor='red', alpha=0.2)\n",
    "plt.ylabel('Frequency (F)')\n",
    "plt.title('Histogram ')\n",
    "plt.xlabel('Feature')\n",
    "plt.grid(True)\n",
    "\n",
    "# Show the histogram and statistics\n",
    "plt.show()\n",
    "\n",
    "# Print the mean and variance of 'Feature1'\n",
    "print(f'Mean : {mean_feature1}')\n",
    "print(f'Variance : {variance_feature1}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a3cf0b86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.spatial import distance\n",
    "\n",
    "\n",
    "vector1 = np.array([df['f10'][0], df['f15'][0]])\n",
    "vector2 = np.array([df['f10'][3], df['f15'][3]])\n",
    "\n",
    "# Define a range of values for 'r'\n",
    "r_values = range(1, 11)\n",
    "\n",
    "# Calculate Minkowski distances for different 'r' values\n",
    "distances = [distance.minkowski(vector1, vector2, p=r) for r in r_values]\n",
    "\n",
    "# Create a plot to observe the nature of the graph\n",
    "plt.plot(r_values, distances, marker='o', linestyle='-')\n",
    "plt.ylabel('Minkowski Distance')\n",
    "plt.title('Minkowski Distance vs. r')\n",
    "plt.xlabel('r')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "cc0ce2e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (1882, 2)\n",
      "X_test shape: (807, 2)\n",
      "y_train shape: (1882,)\n",
      "y_test shape: (807,)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "classes = [0, 1]\n",
    "sdata = df[df['Label'].isin(classes)]\n",
    "\n",
    "# Define your features (X) and target (y)\n",
    "X = sdata[['f2', 'f3']]\n",
    "y = sdata['Label']\n",
    "\n",
    "# Split the dataset into a train set (70%) and a test set (30%)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Now, you have your train and test sets for binary classification\n",
    "print(\"X_train shape:\", X_train.shape)\n",
    "print(\"X_test shape:\", X_test.shape)\n",
    "print(\"y_train shape:\", y_train.shape)\n",
    "print(\"y_test shape:\", y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "90e444f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.919454770755886\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "# Assuming you have already split your data into X_train and y_train\n",
    "# If not, please refer to the previous code for splitting the data.\n",
    "\n",
    "# Create a k-NN classifier with k=3\n",
    "neigh = KNeighborsClassifier(n_neighbors=3)\n",
    "\n",
    "# Fit the classifier to your training data\n",
    "neigh.fit(X_train, y_train)\n",
    "accuracy = neigh.score(X_test, y_test)\n",
    "\n",
    "# Print the accuracy report\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "774e150e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Class: 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\Software\\Lib\\site-packages\\sklearn\\base.py:464: UserWarning: X does not have valid feature names, but KNeighborsClassifier was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "\n",
    "test_vect = [[0.009625,0.003646 ]]  # Replace with the feature values you want to classify\n",
    "\n",
    "# Use the predict() function to classify the test vector\n",
    "predicted_class = neigh.predict(test_vect)\n",
    "\n",
    "# Print the predicted class\n",
    "print(\"Predicted Class:\", predicted_class[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2bad1e65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Define your feature vectors (X_train, X_test) and class labels (y_train, y_test)\n",
    "# Assuming you have already split your data into training and test sets\n",
    "# If not, please refer to the previous code for splitting the data.\n",
    "\n",
    "# Create arrays to store accuracy values\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "k_values = range(1, 12)\n",
    "knn_accuracies = []\n",
    "nn_accuracies = []\n",
    "\n",
    "# Iterate through different values of k\n",
    "for k in k_values:\n",
    "    # Train k-NN classifier with k=3\n",
    "    knn_classifier = KNeighborsClassifier(n_neighbors=k)\n",
    "    knn_classifier.fit(X_train, y_train)\n",
    "\n",
    "    # Predict using k-NN\n",
    "    knn_predictions = knn_classifier.predict(X_test)\n",
    "\n",
    "    # Calculate accuracy for k-NN\n",
    "    knn_accuracy = accuracy_score(y_test, knn_predictions)\n",
    "    knn_accuracies.append(knn_accuracy)\n",
    "\n",
    "    # Train NN classifier with k=1\n",
    "    nn_classifier = KNeighborsClassifier(n_neighbors=1)\n",
    "    nn_classifier.fit(X_train, y_train)\n",
    "\n",
    "    # Predict using NN\n",
    "    nn_predictions = nn_classifier.predict(X_test)\n",
    "\n",
    "    # Calculate accuracy for NN\n",
    "    nn_accuracy = accuracy_score(y_test, nn_predictions)\n",
    "    nn_accuracies.append(nn_accuracy)\n",
    "\n",
    "# Plot the accuracy results\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(k_values, knn_accuracies, label='k-NN (k=3)', marker='o')\n",
    "plt.plot(k_values, nn_accuracies, label='NN (k=1)', marker='o')\n",
    "plt.title('Accuracy vs. k for k-NN and NN')\n",
    "plt.xlabel('k')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xticks(k_values)\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "c6e35900",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix (training data):\n",
      "[[ 663   56]\n",
      " [  25 1138]]\n",
      "\n",
      "Classification Report (training data):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.96      0.92      0.94       719\n",
      "           1       0.95      0.98      0.97      1163\n",
      "\n",
      "    accuracy                           0.96      1882\n",
      "   macro avg       0.96      0.95      0.95      1882\n",
      "weighted avg       0.96      0.96      0.96      1882\n",
      "\n",
      "\n",
      "Confusion Matrix (test data):\n",
      "[[296  40]\n",
      " [ 25 446]]\n",
      "\n",
      "Classification Report (test data):\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.88      0.90       336\n",
      "           1       0.92      0.95      0.93       471\n",
      "\n",
      "    accuracy                           0.92       807\n",
      "   macro avg       0.92      0.91      0.92       807\n",
      "weighted avg       0.92      0.92      0.92       807\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "\n",
    "# Train a k-NN classifier with k=3 on the training data\n",
    "neigh = KNeighborsClassifier(n_neighbors=3)\n",
    "neigh.fit(X_train, y_train)\n",
    "\n",
    "# Predict class labels for the training and test data\n",
    "y_train_pred = neigh.predict(X_train)\n",
    "y_test_pred = neigh.predict(X_test)\n",
    "\n",
    "# Calculate confusion matrices for training and test data\n",
    "confusion_matrix_train = confusion_matrix(y_train, y_train_pred)\n",
    "confusion_matrix_test = confusion_matrix(y_test, y_test_pred)\n",
    "\n",
    "# Generate classification reports for training and test data\n",
    "report_train = classification_report(y_train, y_train_pred)\n",
    "report_test = classification_report(y_test, y_test_pred)\n",
    "\n",
    "# Print confusion matrices and classification reports\n",
    "print(\"Confusion Matrix (training data):\")\n",
    "print(confusion_matrix_train)\n",
    "print(\"\\nClassification Report (training data):\")\n",
    "print(report_train)\n",
    "\n",
    "print(\"\\nConfusion Matrix (test data):\")\n",
    "print(confusion_matrix_test)\n",
    "print(\"\\nClassification Report (test data):\")\n",
    "print(report_test)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
